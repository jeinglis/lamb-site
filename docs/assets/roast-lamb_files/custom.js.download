
/**
 * @fileoverview Custom functionality to apply throughout every adsize. This
 * has a dependency on common.js and utils.js
 */
var custom = (function() {

  /**
   * Classes which our JS hooks into. Add more class names as necessary.
   * @enum
   * @private
   */
  var elementClass_ = {
    item: 'js-item',
    itemName: 'js-item-name',
    itemPrice: 'js-item-price',
    itemSalePrice: 'js-item-saleprice',
    itemRegularPrice: 'js-item-regularprice',
    itemCTA: 'js-item-cta'    
  };

  /**
  * Element IDs.
  * @enum {string}
  * @private
  */
  var elementId_ = {
    gpaDataProvider: 'gpa-data-provider'
  };

  /**
   * Initialization. Called from handleAdInitialized on each page.
   */
  function init() {
    utils.log('custom.init()');
    var data = common.getAdData();
    if (!data) return;

    // If you're using the swipe gallery to display feed items.
    //initItemsUsingGallery_();

    // If you're NOT using the swipe gallery to display feed items.
    initItemsWithoutGallery_();
  }

  /**
   * Find all items used in the swipe gallery and initialize custom behavior.
   * @private
   */
  function initItemsUsingGallery_() {
    var gallery = common.getGallery();

    // Apply settings to each item in the gallery
    var items = gallery.querySelectorAll('.' + elementClass_.item);
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      initItemDisplay_(item);
    }
  }

  /**
   * Find all items used outside the gallery and initialize custom behavior.
   * @private
   */
  function initItemsWithoutGallery_() {
    // Apply settings to each item
    var items = document.querySelectorAll('.' + elementClass_.item);
    for (var i = 0; i < items.length; i++) {
      var item = items[i];
      initItemDisplay_(item);
    }
  }

  /**
   * Set the display settings for each item.
   * Add any custom functionality you need applied on load.
   * @param {Element} item Item element.
   * @private
   */
  function initItemDisplay_(item) {

    // if you're using sales prices.
    //setSalePricesDisplay_(item);

    // Set mouseout.
    itemMouseOut(item);

    //Custom animation 
    animationBuild();     
  }

  /**
   * Sets the 3 price elements to display correctly when using sales price.
   * Find your price elements and set into common functionality.
   * @param {Element} item Item element.
   * @private
   */
  function setSalePricesDisplay_(item) {
    // Get reference to each price element.
    var itemPrice = item.querySelector('.' + elementClass_.itemPrice);
    var itemSalePrice = item.querySelector('.' + elementClass_.itemSalePrice);
    var itemRegularPrice = item.querySelector('.' + elementClass_.itemRegularPrice);

    // Sets each item to display correct prices.
    common.displayCorrectPrices(itemPrice, itemSalePrice, itemRegularPrice);
  }

  /**
   * Custom Item Mouse Interactions. Add your own behavior.
   */

  /**
   * Custom Mouseover interaction functionality.
   * @param {Element} item
   */
  function itemMouseOver(item) {
    var itemCTA = item.querySelector('.' + elementClass_.itemCTA);
    itemCTA.style.backgroundColor = '#B52327';
  }

  /**
   * Custom Mouseout interaction functionality.
   * @param {Element} item
   */
  function itemMouseOut(item) {
    var itemCTA = item.querySelector('.' + elementClass_.itemCTA);
    itemCTA.style.backgroundColor = '#F01428';
  }



  function transformDynamicData() {
    var dataProvider = document.querySelector('#' + elementId_.gpaDataProvider);
    dataProvider.addDataTransformer(function(dynamicData) {
      for (i = 0; i < dynamicData.Product.length; i++) { //start loop over products

        //if the product has the custom attribute
        if (dynamicData.Product[i].custom) {
          //console.log("for index: " + i);
          //split text
          var item = dynamicData.Product[i];
          var nameValues = item.custom.split(' | ');

          if (nameValues.length > 1) {
            item.name1 = nameValues[0];
            item.name2 = nameValues[1];
          } else {
            item.name1 = item.custom
          }
        } else { //the product doesn't have the custom attribute at all
          //console.log("index " + i + ": custom attribute not found");
        } // end else

      } //end loop over products

    });
  }



/* Animate elements */

  function animationBuild(){

    var tl = new TimelineMax();
    var sine = Sine.easeOut;
    CSSPlugin.defaultForce3D = false;

    tl
    .from(".heading-holder", 0.5, {opacity:0, ease: sine}, "0.5")
    .from(".subheading-holder", 0.5, {opacity:0, y: 20, ease: sine}, "+=0.5")
    .from(".cta-holder", 0.5, {opacity:0, ease: sine}, "+=0.5")   

  }



  return {
    init: init,
    itemMouseOver: itemMouseOver,
    itemMouseOut: itemMouseOut,
    transformDynamicData: transformDynamicData
  };

})();
